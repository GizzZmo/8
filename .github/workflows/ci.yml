name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project in development mode
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run OSI simulation tests
        run: |
          chmod +x test_all_scenarios.sh
          ./test_all_scenarios.sh
      
      - name: Test main simulation
        run: |
          cd osi_blockchain_simulation
          python main_simulation.py --data "CI Test"
          python main_simulation.py --data "Encrypted Test" --encrypt
          python main_simulation.py --data "Signed Test" --sign
          python main_simulation.py --blockchain
      
      - name: Test example flows
        run: |
          cd osi_blockchain_simulation/examples
          python simple_text_flow.py
          python blockchain_flow.py
          python encrypted_data_flow.py
          python signed_data_flow.py

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
      
      - name: Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 osi_blockchain_simulation --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 osi_blockchain_simulation --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Run pylint
        run: |
          pylint osi_blockchain_simulation --exit-zero
        continue-on-error: true

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Create distribution package
        run: |
          # Create a distributable package structure
          mkdir -p dist/osi-blockchain-simulation
          cp -r osi_blockchain_simulation dist/osi-blockchain-simulation/
          cp test_all_scenarios.sh dist/osi-blockchain-simulation/
          cp readme.md dist/osi-blockchain-simulation/
          cp LICENSE dist/osi-blockchain-simulation/
          
          # Create version info
          echo "Build Date: $(date -u)" > dist/osi-blockchain-simulation/BUILD_INFO.txt
          echo "Git Commit: $(git rev-parse HEAD)" >> dist/osi-blockchain-simulation/BUILD_INFO.txt
          echo "Git Branch: $(git rev-parse --abbrev-ref HEAD)" >> dist/osi-blockchain-simulation/BUILD_INFO.txt
      
      - name: Create Python package archive
        run: |
          cd dist
          tar -czf osi-blockchain-simulation.tar.gz osi-blockchain-simulation/
          zip -r osi-blockchain-simulation.zip osi-blockchain-simulation/
      
      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: |
            dist/osi-blockchain-simulation.tar.gz
            dist/osi-blockchain-simulation.zip
          retention-days: 30

  build-web-assets:
    name: Build Web Assets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Prepare web assets
        run: |
          mkdir -p dist/web
          cp index.html dist/web/
          cp readme.md dist/web/
          cp main.md dist/web/
          cp osi_model.md dist/web/
          cp osi_flow_sim.md dist/web/
          
          # Create web asset info
          echo "Web Assets Build" > dist/web/BUILD_INFO.txt
          echo "Build Date: $(date -u)" >> dist/web/BUILD_INFO.txt
          echo "Git Commit: $(git rev-parse HEAD)" >> dist/web/BUILD_INFO.txt
      
      - name: Create web assets archive
        run: |
          cd dist
          tar -czf web-assets.tar.gz web/
          zip -r web-assets.zip web/
      
      - name: Upload web assets
        uses: actions/upload-artifact@v4
        with:
          name: web-assets
          path: |
            dist/web-assets.tar.gz
            dist/web-assets.zip
          retention-days: 30

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Prepare documentation
        run: |
          mkdir -p dist/docs
          # Copy files if they exist
          for file in readme.md main.md osi_model.md osi_flow_sim.md roadmap.md todo.md \
                      QUICKSTART.md DEPLOYMENT_GUIDE.md IMPLEMENTATION_SUMMARY.md \
                      IMPLEMENTATION_COMPLETE.md FIX_CHECKLIST.md SETUP_SECRETS_GUIDE.md \
                      COPILOT_AUTHENTICATION_FIX.md BUILD_GUIDE.md CI_CD_DOCUMENTATION.md \
                      CI_CD_QUICK_REFERENCE.md LICENSE; do
            if [ -f "$file" ]; then
              cp "$file" dist/docs/
            fi
          done
          
          # Create docs info
          echo "Documentation Build" > dist/docs/BUILD_INFO.txt
          echo "Build Date: $(date -u)" >> dist/docs/BUILD_INFO.txt
          echo "Git Commit: $(git rev-parse HEAD)" >> dist/docs/BUILD_INFO.txt
      
      - name: Create documentation archive
        run: |
          cd dist
          tar -czf documentation.tar.gz docs/
          zip -r documentation.zip docs/
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            dist/documentation.tar.gz
            dist/documentation.zip
          retention-days: 90

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [test, lint, build-artifacts, build-web-assets, build-docs]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display artifact summary
        run: |
          echo "=== Build Artifacts Summary ==="
          echo ""
          echo "Available artifacts:"
          ls -lhR artifacts/
          echo ""
          echo "Build completed successfully!"
